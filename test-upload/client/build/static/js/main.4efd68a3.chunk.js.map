{"version":3,"sources":["utils/queries.js","components/UploadForm.js","components/App.js","reportWebVitals.js","index.js"],"names":["GOOGLE_CLOUD_AUTH","gql","GOOGLE_CLOUD_STORAGE","signedIn","UploadForm","props","useQuery","loadingCloudStorage","googleCloudStorageWrapper","firebase","apps","length","firebaseConfig","data","googleCloudStorage","JSON","parse","console","log","initializeApp","err","error","stack","loadingGoogleCloudAuth","googleCloudAuthWrapper","googleCloudAuth","auth","signInWithEmailAndPassword","then","userCredential","catch","errorCode","code","errorMessage","message","uniqueFilename","Math","floor","Date","getTime","generateHash","storageRef","storage","ref","child","useState","selectedFile","state","setState","onFileUpload","a","FormData","append","name","put","snapshot","getDownloadURL","downloadURL","asset","type","onChange","event","target","files","accept","onClick","lastModifiedDate","toDateString","process","GOOGLE_APPLICATION_CREDENTIALS","client","ApolloClient","uri","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4efd68a3.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const GOOGLE_CLOUD_AUTH = gql`\nquery {\n  googleCloudAuth\n}`;\n\nexport const GOOGLE_CLOUD_STORAGE = gql`\nquery {\n  googleCloudStorage\n}`;","/**\n * @file\n * Upload image form.\n * - There's an input to chooose/select the file. That will save to state\n * - Then there's a button to upload the selected file. That will connect to the cloud server like Firebase.\n * \n */\nimport React, { useState } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport firebase from \"firebase/app\";\n\n// Add the Firebase services that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport 'firebase/storage'\n\n// Generate random hash for filenames\nimport generateHash from 'random-hash';\n\n// Get Firebase secrets\nimport { GOOGLE_CLOUD_STORAGE, GOOGLE_CLOUD_AUTH } from '../utils/queries';\n\nlet signedIn = false;\n\n// Upload Form component\nexport default function UploadForm(props) {\n\n    // Gets firebaseConfig object\n    const { loadingCloudStorage, googleCloudStorageWrapper } = useQuery(GOOGLE_CLOUD_STORAGE);\n    \n    // Initialize Firebase\n    if (!loadingCloudStorage && !firebase.apps.length) {\n        let firebaseConfig = googleCloudStorageWrapper?.data?.googleCloudStorage || {}\n        firebaseConfig = JSON.parse(firebaseConfig);\n\n        console.log(firebaseConfig);\n\n        try {\n            firebase.initializeApp(firebaseConfig)\n        } catch (err) {\n            console.error(\"Firebase initialization error raised\", err.stack)\n        }\n    }\n\n    // Gets googleCloudAuth array\n    const { loadingGoogleCloudAuth, googleCloudAuthWrapper } = useQuery(GOOGLE_CLOUD_AUTH);\n\n    if(!loadingGoogleCloudAuth && !signedIn) {\n        let googleCloudAuth = googleCloudAuthWrapper?.data?.googleCloudAuth || [\"\",\"\"];\n        googleCloudAuth = JSON.parse(googleCloudAuth);\n\n        console.log(googleCloudAuth);\n\n        firebase.auth().signInWithEmailAndPassword(...googleCloudAuth)\n            .then((userCredential) => {\n                // Signed in \n                // var user = userCredential.user;\n            })\n            .catch((error) => {\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                console.log(errorCode + \": \" + errorMessage);\n            });\n            signedIn = true;\n    }\n\n\n    // Get a reference to the storage service, which is used to create references in your storage bucket\n    const uniqueFilename = Math.floor(new Date().getTime()) + generateHash({ length: 6 });\n    const storageRef = firebase.storage().ref().child(uniqueFilename);\n\n    // State to keep track of selected file\n    const initialState = {\n        // Initial: No file selected\n        selectedFile: null\n    }\n    const [state, setState] = useState(initialState);\n\n    // On file select, update the state with the filepath the user chose from their Finder or File Explorer\n    const onFileChange = event => {\n        setState({ selectedFile: event.target.files[0] });\n    };\n\n    // On file upload, send the selected file to the cloud server\n    const onFileUpload = async() => {\n\n        // Create formData data from state to be sent to cloud server\n        const formData = new FormData();\n        formData.append(\n            \"myFile\",\n            state.selectedFile,\n            state.selectedFile.name\n        );\n        console.log(state.selectedFile);\n\n        \n        await storageRef.put(state.selectedFile)\n        .then((snapshot) => {\n            console.log(\"Uploading started\");\n            return snapshot.ref.getDownloadURL();\n        }).then(downloadURL=>{\n            console.log('Uploaded:');\n            console.log({asset: downloadURL});\n\n            //TODO: Send downloadURL to mongoose, probably using a mutation\n\n            \n        }).catch(error => {\n            throw error;\n        });\n\n    }; // onFileUpload\n\n    // Display image after file upload completes\n    const fileData = () => {\n\n        if (state.selectedFile) {\n\n            return ( <div >\n                <h2> Image Selected from computer: </h2>\n\n                <p> Filename: { state.selectedFile.name } </p>\n\n\n                <p> File Type: { state.selectedFile.type } </p>\n\n\n                <p>Last Modified: { \" \" } { state.selectedFile.lastModifiedDate.toDateString() } </p>\n\n                </div>\n            );\n        } else {\n            return ( <div>\n                <br/>\n                <h4> Choose file, then upload! </h4> </div>\n            );\n        }\n    }; // formData\n\n\n    // Render upload form\n    return ( \n        <div>\n            <h1>\n                Upload Image\n            </h1>\n\n            <div>\n                <input type = \"file\" onChange = { onFileChange } accept = \"image/*\" />\n                <button onClick = { onFileUpload } >\n                    Upload!\n                </button>\n            </div>\n            \n            <aside>\n                { fileData() }\n            </aside>\n\n            <article >\n                <h2 > Debug Google Cloud Service Account details: </h2>\n                <p > { process.env.GOOGLE_APPLICATION_CREDENTIALS } </p> \n            </article>\n        </div>\n    )\n}","// Components\nimport './App.css';\nimport UploadForm from './UploadForm.js'\n\n// Add Apollo context components\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <main className=\"App\">\n        <UploadForm/>    \n      </main>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}